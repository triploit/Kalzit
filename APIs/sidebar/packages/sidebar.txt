$leftSidebarDragHandler = !fun ($callback) {
	($xPos;$yPos) fun {
		!if (xPos < 35) {
			!collapseSidebar.
		}. !else {
			`If the sidebar was hidden during the drag, show it again now`
			!expandSidebar.
			
			`Change the width of the view in front of the separator, so the separator ends up where the mouse is`
			`Only do that if the sidebar will end up lager than a certain size - makes the UX much better. `
			!if (xPos > 135) {
				setSidebarContentWidth: xPos - 14.
				
				`Pass the appropriate sidebar width to the callback`
				callback: xPos
			}.
			`If the sidebar width is between 35 and 145, keep it at 135 - communicates that this is the smallest size`
			!else {
				setSidebarContentWidth: 135 - 14
			}
		}
	}
}.

#{
	The callback will be used when resizing occurs - it gets the number of pixels which the sidebar should use as its width
}
$leftSidebarResizeTool = !fun ($callback ; $views) {
	$viewInFront = @(cssClass: "k-sidebar_content_wide") !ifElse (void eq views) {
		@(opacity 0) uiContainer: "0"
	};{
		uiContainer: views.
	}.
	
	@(onDrag: leftSidebarDragHandler: callback)
	@(cmHeight toolbarCmHeight)
	@verticalCenter
	$separator = @dynamicWidth @horizontalResizeCursor uiContainer:
		(uiHorizontalPxSpace 7);
		(@(pxWidth 1) !uiHorizontalSeparator);
		(uiHorizontalPxSpace 7).
	
	["desktop"; @dynamicWidth @(cssClass: "k-sidebar_part") uiContainer:
		viewInFront;
		separator;
		(uiHorizontalPxSpace 10)
	];
	["mobile"; uiContainer: void `Mobile version does nothing`]
}.

#{
	A helper function for generating a left-hand sidebar. The sidebar will be separated from the main content, and it will be resizable by the user.
	To make everything work properly, the "config" parameter should be an object with the following required fields:
	
	* "sidebarViews" is a list of views that will be added to the sidebar itself - not the toolbar. It can also be a function which returns these views.
	* "toolbarViews" is a list of views that will be added to the toolbar, so they will appear above the sidebar and next to the separator line.
	* "mainContent" is a single view that contains the main content of the app. It will appear next to the sidebar and below the toolbar, and get resized accordingly when the sidebar gets wider or smaller.
	* "mobileToolTitle" (optional) is a title which will be applied to a mobile tool. If you specify this, the sidebar will be available in popup-form for mobile devices
	
	If you call this function, the layout configuration of your mainContent view may be automatically (like width, height, positioning, ...).
	This can also happen any time later after the initial call, especially the width changes. To make everything work, never specify a specific width for the views passed via the "config" object.
	
	Also, the main app window will have its scrolling functionality disabled (since there are now two different potentially scrolling parts side by side - the purpose of a sidebar).
	So if you want the sidebar to scroll down if needed, you should add the @verticalScroller annotation to the appropriate views - that is done automatically for the main view.
	
	To actually see the sidebar in your app, you should do the following:
	
	```
	$mainContent = `The main view of your app`.
	$sidebarManager = `... use this function here`.
	`Register toolbar tools - the one generated by the sidebar manager should be the first one`
	toolsAtLeft:
		[$tool propOf sidebarManager].
		`Maybe add more tools if you like`
	
	`Show toolbar, sidebar, and main content`
	print: !uiGlobalToolbar.
	print: $sidebar propOf sidebarManager.
	print: mainContent.
	```
}
$leftSidebarManager = !fun ($config) {
	$sidebarContent = @(cssClass: "k-sidebar_content_wide") @(percentHeight 100) uiContainer: do: $sidebarViews propOf config.
	$mainContent = @verticalScroller @right @bottom @(cssClass: "k-sidebar_mainview_wide") $mainContent propOf config.
	
	$sidebar = @(cssClass: "k-sidebar_part") @left @bottom @dynamicWidth @(height: "100% - " + toolbarCmHeight + "cm") uiContainer:
		[@left sidebarContent];
		[@(cssClass: "k-sidebar_invisible_part") uiContainer: void];
		[@dynamicWidth @windowTop @(percentHeight 100) @(onDrag: leftSidebarDragHandler: void) @horizontalResizeCursor uiContainer:
			[uiHorizontalPxSpace 12];
			[@windowTop !uiHorizontalSeparator];
			[uiHorizontalPxSpace 6]
		].
	
	!disableScrolling.

	`This will be returned`
	[$tool;[
		(!ifNot (void eq $mobileToolTitle propOf config) {
			`We have a mobile tool title, meaning we want a mobile tool (overrides the default)`
			["title"; $mobileToolTitle propOf config];
			["mobile"; !uiTitledPopupView ($mobileToolTitle propOf config) ->
				@(width: "100% - 14px") @center uiContainer: do: $sidebarViews propOf config
			]
		});
		{
			`Do something with the new width of the sidebar`
		} leftSidebarResizeTool
			$toolbarViews propOf config
	]];
	[$sidebar;sidebar].
}.
$leftSidebarToggleButtonTool = !fun () {
	["desktop";@(percentHeight 100) @(cmWidth 0,35) uiContainer:
		(@(cmWidth 0,35) @verticalCenter !uiSidebarToggleButton);
		@(width "0.35cm - 5px") uiContainer: void
	];
	["mobile";uiContainer: void]
}.