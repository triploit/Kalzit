$allowedDomains = storedModifiableStringList: "kalzit.allowedDomains".

/* @kalzit.for uiWebpage

	Displays a webpage after asking the user to allow the targeted domain (once, not every time)
*/
$uiWebpage = $uiWeb = $uiShowWebpageUrl = !fun ($pageUrl) {
	$domain = urlGetHostName: pageUrl.
	!ifElse (domain listContains getArray: allowedDomains) {
		`The domain is allowed!`
		uiShowWebpageUrlNative: pageUrl
	};{
		`The domain is not allowed yet`
		uiRestrictedWebpage: pageUrl.
	}
}.

/* @kalzit.for uiRestrictedWebpage

	Displays a webpage after asking the user to allow the targeted domain (always, regardless of prior confirmations)
*/
$uiRestrictedWebpage = !fun ($pageUrl) {
	$domain ? (default: "") = urlGetHostName: pageUrl.
	!ifElse ("" eq strTrim: domain) {
		`Domain is empty - we can allow that`
		uiShowWebpageUrlNative: pageUrl.
	};{
		`We have to ask for permission`
		$confirmView = @centerText uiContainer:
			[ strings: $confirmDomainAccess ];
			[urlGetHostName: pageUrl];
			[!uiButton (strings: $showPage) -> {
				uiHide: confirmView.
				(uiPrint: view): @(percentHeight 100) @(percentWidth 100)
					uiShowWebpageUrlNative: pageUrl.
				
				!ifNot (domain listContains getArray: allowedDomains) {
					($push propOf allowedDomains): domain	
				}
			}].
			
		$view = uiContainer: confirmView.
		
		`Return` view.
	}
}