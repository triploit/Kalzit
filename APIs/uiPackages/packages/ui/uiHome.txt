$uiHomeScreenIcon = ($iconGraphic ? UiElement ; $_applySpecificLook ? (default: {@(backgroundColor red) x})) fun {
	$ico = @rounded @(emWidth 5) @(emHeight 5) iconGraphic.
	_applySpecificLook: ico
}.

$uiHomeScreenLink = ($appInfo) fun {
    $colorInfo = $color propOf appInfo.
    $appColor ? (default: RgbColor: 122) = !ifNot (void eq colorInfo) {
        $potentialAppColor = resolveName: $color propOf appInfo.
        `Return` !ifElse (void eq potentialAppColor) {
            `Parse the color as a semicolon-separated list of integers`
            (List:Int): ";" strSplit $color propOf appInfo
        };{
            `Continue with the found color`
            potentialAppColor
        }.
    }.
    
	$description = (default: "Untitled"): $title propOf appInfo.
	$iconPath = $icon propOf appInfo.
	
	$gradient = backgroundGradientTopToBottom: [appColor];[{max: 0;x} each appColor - 150].
	$border = borderColor: {max: 0;x} each appColor - 50.
	$graphic = !ifElse (not: void eq iconPath) {
		uiShowImageUrl: "/apps/" + ($id propOf appInfo) + "/" + iconPath.
	};{
		uiContainer: @(emFontSize 1,5) uiText: first: "" strSplit description.
	}.
	
	uiContainer: ("/app/" + ($id propOf appInfo)) uiLink @centerText uiContainer: (graphic uiHomeScreenIcon {@(foregroundColor white) @border @gradient x});uiText: description
}.
$uiHomeScreen = ($_action ? (default: launchAppName)) fun {
	$view = uiColumns: void.
	$printToView = uiPrint: view.

	$appView = !fun ($_app) {
		!ifElse (developerMode) {
			printToView: uiHomeScreenLink: _app
		};{
			!if (not: $dev propOf _app) {
				printToView: uiHomeScreenLink: _app
			}
		}
	}.
	
	`Load the app data from memory - no server requests required`
	appView each standardApps.
	
	view.
}.
