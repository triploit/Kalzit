/* @kalzit.for boolean
	Converts a value to a boolean value.
	Because in Kalzit booleans are the same as numbers, 1 means "true" and 0 means "false".
	
	This function works in a very simple way:
		If the parameter is 0 or void (the empty list), 0 is returned.
		Otherwise, the result is 1.
*/
$Boolean = {((void eq x) | 0 eq x) at 1;0}.

/* @kalzit.for list
	Converts a value to a list, where every item itself gets a specified type.
	The item type is the first parameter of this function.
	
	Usage example: $booleans = (List:Boolean): 1;2;3.
	This example would return (1;1;1). Every number of the list is converted to a Boolean value.
	
	If only a single value is given (which is not a list), the result is a list still, which contains the converted value:
		(List:Boolean): 7 `returns [1]`
*/
$List = $_itemType fun {{_itemType each x;()}}.

/* @kalzit.for any
	This is a type function that accepts any value, and leaves unchanged.
	The function just returns its first parameter.
*/
$Any = {x}.

/* @kalzit.for string
	Converts a single value to a string.
	This function does not yet work as intended.
	
	When used with single values (not lists), it works just fine:
		
		String: 6. `Becomes "6", the string value`
	
	But when used with a list, instead of turning the list into a single string, it tries to convert every included item to a string instead.
	So, with the current version, this would work:
		
		String: 1;2.
		
	The result would be a list with two strings inside it, "1" and "2". That will also work with more-dimensional arrays.
*/
$String = {"" + x}.

/* @kalzit.for sized_list
	Converts a value to a list of the given size. When converting to a list, a type function is applied to every item.
	The target list size is the first parameter, the type function for each item is the second one.
	
	Example: (2 SizedList Int): "6";4,6;9.
	This returns (6;4). The string "6" is converted to a number, and the decimal value "4,6" is converted to an integer. The third item is cut off, because the list would be to long otherwise.
	
	If the list is too short, it will be extended:
		(8 SizedList Any): 1;2;3.
		This returns (1; 2; 3; 1; 2; 3; 1; 2).
		
	So, if the list does not have enough elements, the elements are simply repeated until the target list size is reached.
	
	The only exception is the empty list, or void. With that as the parameter, the empty list is returned.
*/
$SizedList = ($size ? Int ; $_itemType) fun {{(List: _itemType): (0 range size - 1) at x}}.

/* @kalzit.for one_or_many
A type function that allows single values and arrays of a given type.
*/
$OneOrMany = $_type fun {
	{
		$arr = x;(). 
		do: (1 eq length: arr) at ({(List:_type): arr};{_type: 0 at arr})
	}
}.