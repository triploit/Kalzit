/* @kalzit.for upload_multiple_files
	Gets a configuration object with these fields:
	* `files` - a simple (non-modifiable) array of file objects to upload, as returned by a file picker.
	* `folderName` - an optional string that contains the user files sub-folder we want to put the new file inside of.
	* `callback` - described below

	The callback is called for each file with one of the following codes:
		0 if the upload failed because the file size was too big.
		1 if the upload succeeded.
		2 if the upload failed because of an unknown reason.
		The second parameter of the callback is the file object
*/
$uploadMultipleFiles = !fun ($config) {
	$files = $files propOf config.

	{uploadSingleFile: config;[$file; [x]]} all files.
}.

/* @kalzit.for upload_single_file
	Gets a configuration object with these fields:
	* `file` - a file object to upload, as returned by a file picker.
	* `folderName` - an optional string that contains the user files sub-folder we want to put the new file inside of.
	* `callback` - described below

	The callback is called with the following codes:
		0 if the upload failed because the file size was too big.
		1 if the upload succeeded.
		2 if the upload failed because of an unknown reason.
		The second parameter of the callback is the file object
*/
$uploadSingleFile = $attemptSingleFileUpload = !fun ($config) {
	$_file = $file propOf config.
	$callback = $callback propOf config.
	$folderName ? SafeFilePath = $folderName propOf config.

	($_status fun {
		$success = $success propOf parseJson: !if (200 eq $code propOf _status) {
			$text propOf _status
		}.
		
		!if (success) {
			1 callback _file
		}. !else {
			!if (void eq success) {
				2 callback _file
			}. !else {
				0 callback _file	
			}
		}
	}) ($uploadAsync propOf _file) folderName + $name propOf _file
}.
