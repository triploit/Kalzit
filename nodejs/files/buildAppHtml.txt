`Read command line arguments`
$app = appParameter: "kalzit-file".
$appBase = ("(.+)\.k" ; "$1") strReplaceRegex app.
$appFolder = fileParent: app.
$rootFolder = appParameter: "kalzit-root-folder".
$platform ? (default: "html5") = appParameter: "platform".
$debugConstant ? (default: "false") = appParameter: "debug-value".
$treeGeneratorWanted ? (default: "false") = appParameter: "tree-generator".
$timeoutWanted ? (default: !ifElse ("true" eq treeGeneratorWanted) {"true"};{"false"}) = appParameter: "timeout-wanted".

`These variables allow you to add or remove used libraries using command line parameters; good for multiple versions (pro, lite, mobile, desktop, ...)`
$commandLineExcludedLibraries = ";" strSplit appParameter: "excluded-libraries".
$includedLibraries = ";" strSplit appParameter: "included-libraries". `This trumps the list of exclusions`


`Here we begin the actuall build process`
print: "Trying to build Kalzit app " + app.

`parse JSON configuration`
$configPath = ("\.k$";".json") strReplaceRegex app.
$configObject = parseJson: !if (fileIsFile: configPath) { fileContent: configPath }.

`define options and default values for them`
$excludedLibraries = commandLineExcludedLibraries;($excludedLibraries `TODO: Make other valid name forms work` propOf configObject).
$appleTouchIcon = $appleTouchIcon propOf configObject.

$hasCustomLibrary = fileIsFile: (fileParent: app) + "/.doNotTouch/_min.js".

`Generate a custom CSS tag here if needed (<appId>.css)`
$styling = (default: ""): "<style>" + (fileContent: ("(.+)\.k" ; "$1.css") strReplaceRegex app) +  "</style>".

$skeletonCode = do:{
		$usedLibraries = removeDuplicates:
			`If the API is in the list of included libraries (given via command line), add it anyway, even if it is in the exclusion list`
			includedLibraries;
			(rootFolder + "/" + {
				`Check if the API should be actually included with the app`
				not: x listContains excludedLibraries
			} filter parseJson: fileContent: rootFolder + "/" + platform + "/usable-libraries.json");
			!if (hasCustomLibrary) {
				(fileParent: app) + "/.doNotTouch"
			}.
			
		## Compile a single blob of JavaScript that includes the core language functions and needed APIs
		# Make a list of all the core language files we need (does not include APIs, just the core language)
		$coreLanguageFile = "/core/files/_min.js".
		$relativeScriptPaths = coreLanguageFile ; `joined list` ;/
			("/html5/files/" + first each "[^\s]+" allMatches fileContent: rootFolder + "/html5/bootstrap/packageManagerScripts.txt");
			("/html5/files/" + first each "[^\s]+" allMatches fileContent: rootFolder + "/html5/bootstrap/platformScripts.txt").

		$coreLanguageBlob = (";" strJoin fileContent each rootFolder + relativeScriptPaths).
		
		$apisBlob = (";" strJoin
			fileContent: usedLibraries + "/_min.js"
		) + ";".
		
		`This is JavaScript code responsible for setting the "appId" variable (makes appId variable work)`
		$appIdCode = "GLang.packageManager.installJs(function(){this.app_id='" + ((".k";"") strReplace fileName: app) + "'});".

		$translationMapFile = appFolder + "/.doNotTouch/translationMap.json".
		$prefix = appIdCode + "GLang.packageManager.installJs(function(){" +
			(!ifElse (fileIsFile: translationMapFile) {
				`Add JavaScript code which fills the "stringAssetMap" variable`
				"this.string_asset_map=" + fileContent: translationMapFile
			};{
				`Do not fill "stringAssetMap" - just set "appId"`
				""
			}) + 
			
			`Include the standard-apps, so that fewer HTTP requests are needed`
			";this.standard_apps=" + (fileContent: rootFolder + "/apps/home/config/standardApps.json") + 
			
			`Include the global stringAssetMap`
			";this.global_string_asset_map=" + (fileContent: (!getUnixUserFolder) + "/.kalzit/generated/translationMap.json") + "});".
		
		$appBlob = prefix + (!ifElse ("true" eq timeoutWanted) {
			# Timeout logic is wanted
			fileContent: rootFolder + "/html5/files/launchTree-timeout.js"
		};{
			# Timeout logic is not wanted
			fileContent: rootFolder + "/html5/files/launchTree-no-timeout.js"
		}) + ";window.addEventListener('load', function(){GLang.launchTree(" + ((fileContent: app) calcitCompile true `optimized`) + ")});".
		
		# Literally the entire script needed to run the Kalzit app. Will be compressed as a whole if we are not debugging
		$coreLanguageAndAPIsBlob = "const GLANG_DEBUG = "  + debugConstant + "; const GLANG_TREE_GENERATOR_INCLUDED = " + treeGeneratorWanted + "; " + coreLanguageBlob + ";" + apisBlob + ";" + appBlob.
		
		# Create a $scripts variable that either contains a readable or compressed version, depends on if we want to debug stuff
		$scripts = !ifElse (debugConstant eq "false") {
			# Compressed
			
			# Make a temporary file containing the blob
			fileCreateFolder: (!getUnixUserFolder) + "/.kalzit/generated".
			print: $tempFile = (!getUnixUserFolder) + "/.kalzit/generated/buildAppHtmlTempFile-" + (fileName: appBase) + ".js".
			tempFile fileWrite coreLanguageAndAPIsBlob.
			
			# Return a copressed version
			runCommand "./cli command terser -c passes=15 --toplevel " + tempFile
		};{
			# Readable
			coreLanguageAndAPIsBlob
		}.
		
		# Insert the appropriate scripts into the HTML skeleton
		$withoutAppleIcon = ("$scripts$";scripts) strReplace fileContent: (!getUnixUserFolder) + "/.kalzit/generated/_browser_app_skeleton.html".
		
		$withoutCustomHtml = !ifElse (void eq appleTouchIcon) {
			withoutAppleIcon
		};{
			("<head>" ; '<head><link rel="apple-touch-icon" href="' + appleTouchIcon + '" />')
				strReplace withoutAppleIcon
		}.
		
		$withoutCustomStyling = ("$html$"; (default: ""): fileContent: print: appBase + ".html") strReplace withoutCustomHtml.
		
		("</head>"; styling + "</head>") strReplace withoutCustomStyling
	}.


`Now we can generate the final HTML file`
`Replace the last .k in the file name (file extension) by .html to get the path of the generated HTML file`
$generatedHtmlPath = appFolder + "/index.html".

print: "WRITE THE FILE CONTENT".
print: "APP " + app.
print: "APP PARENT " + fileParent: app.
print: "APP FOLDER " + appFolder.

`Write the file content`
generatedHtmlPath fileWrite
	`We replace $head$ with the contents of head.html`
    `TODO: if $head$ is part of the app itself, this will probably cause problems`
    ("$head$";(default: ""): fileContent: appFolder + "/head.html") strReplace skeletonCode.
