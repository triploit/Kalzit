`Read command line arguments`
$app = appParameter: "kalzit-file".
$appBase = ("(.+)\.k" ; "$1") strReplaceRegex app.
$appFolder = fileParent: app.
$rootFolder = appParameter: "kalzit-root-folder".
$platform ? (default: "html5") = appParameter: "platform".
$debugConstant ? (default: "true") = appParameter: "debug-value".

`These variables allow you to add or remove used libraries using command line parameters; good for multiple versions (pro, lite, mobile, desktop, ...)`
$commandLineExcludedLibraries = ";" strSplit appParameter: "excluded-libraries".
$includedLibraries = ";" strSplit appParameter: "included-libraries". `This trumps the list of exclusions`


`Here we begin the actuall build process`
print: "Trying to build Kalzit app " + app.

`parse JSON configuration`
$configPath = ("\.k$";".json") strReplaceRegex app.
$configObject = parseJson: !if (fileIsFile: configPath) { fileContent: configPath }.

`define options and default values for them`
$excludedLibraries = commandLineExcludedLibraries;($excludedLibraries `TODO: Make other valid name forms work` propOf configObject).
$appleTouchIcon = $appleTouchIcon propOf configObject.

$hasCustomLibrary = fileIsFile: (fileParent: app) + "/.doNotTouch/_min.js".

`Generate a custom CSS tag here if needed (<appId>.css)`
$styling = (default: ""): "<style>" + (fileContent: ("(.+)\.k" ; "$1.css") strReplaceRegex app) +  "</style>".

$skeletonCode = do:{
		$usedLibraries = removeDuplicates:
			`If the API is in the list of included libraries (given via command line), add it anyway, even if it is in the exclusion list`
			includedLibraries;
			(rootFolder + "/" + {
				`Check if the API should be actually included with the app`
				not: x listContains excludedLibraries
			} filter parseJson: fileContent: rootFolder + "/" + platform + "/usable-libraries.json");
			!if (hasCustomLibrary) {
				(fileParent: app) + "/.doNotTouch"
			}.
			
		`Include the needed standard APIs`
		$scripts = "GLANG_DEBUG = "  + debugConstant + "; " + (";" strJoin
			fileContent: usedLibraries + "/_min.js"
		) + ";".
		
		$withoutAppleIcon = ("$scripts$";scripts) strReplace fileContent: (!getUnixUserFolder) + "/.kalzit/generated/_browser_app_skeleton.html".
		
		$withoutCustomHtml = !ifElse (void eq appleTouchIcon) {
			withoutAppleIcon
		};{
			("<head>" ; '<head><link rel="apple-touch-icon" href="' + appleTouchIcon + '" />')
				strReplace withoutAppleIcon
		}.
		
		$withoutCustomStyling = ("$html$"; (default: ""): fileContent: print: appBase + ".html") strReplace withoutCustomHtml.
		
		("</head>"; styling + "</head>") strReplace withoutCustomStyling
	}.
	

`This is JavaScript code responsible for setting the "appId" variable (makes appId variable work)`
$appIdCode = "GLang.packageManager.installJs(function(){this.appId='" + ((".k";"") strReplace fileName: app) + "'});".

$translationMapFile = appFolder + "/.doNotTouch/translationMap.json".
$prefix = appIdCode + "GLang.packageManager.installJs(function(){" +
	(!ifElse (fileIsFile: translationMapFile) {
		`Add JavaScript code which fills the "stringAssetMap" variable`
		"this.stringAssetMap=" + fileContent: translationMapFile
	};{
		`Do not fill "stringAssetMap" - just set "appId"`
		""
	}) + 
	
	`Include the standard-apps, so that fewer HTTP requests are needed`
	";this.standardApps=" + (fileContent: rootFolder + "/apps/home/config/standardApps.json") + 
	
	`Include the global stringAssetMap`
	";this.globalStringAssetMap=" + (fileContent: (!getUnixUserFolder) + "/.kalzit/generated/translationMap.json") + "});".

`Here, we embed the actual app code - it is run in its own runtime environment / scope, not the global one`
$appBuildingTempFile = (!getUnixUserFolder) + "/.kalzit/generated/appBuildingTempFile-" + (fileName: appFolder) + "-" + (!getCurrentDate) + ".js".

(appBuildingTempFile) fileWrite prefix + ';GLang.evaluateTree(' + ((fileContent: app) calcitCompile true `optimized`) + ', GLang.appEnvironment = GLang.RuntimeEnvironment(GLang.defaultRuntimeEnvironment));'.


`Now we can generate the final HTML file`
`Replace the last .k in the file name (file extension) by .html to get the path of the generated HTML file`
$generatedHtmlPath = appFolder + "/index.html".

print: "WRITE THE FILE CONTENT".
print: "APP " + app.
print: "APP PARENT " + fileParent: app.
print: "APP FOLDER " + appFolder.
print: "TO " + appBuildingTempFile.

`Write the file content`
generatedHtmlPath fileWrite
	`We replace $app$ from the app skeleton with a minified version of the app code (available in $appBuildingTempFile), and $head$ with the contents of head.html`
    `TODO: if $head$ or $app$ are parts of the app itself, this will probably cause problems`
    ("$head$";(default: ""): fileContent: appFolder + "/head.html") strReplace
	("$app$";(runCommand: './cli command terser --mangle keep_fnames "' + (appBuildingTempFile) + '" --keep-fnames')) strReplace skeletonCode.
	
`Remove the temporary file`
fileDelete: appBuildingTempFile.
